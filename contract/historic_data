#!/usr/bin/env ruby
#
# This script downloads historic data for specific symbols from IB

require 'bundler/setup'
require 'ib/symbols'
require_relative 'config'

# Definition of what we want data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
# Predefined Symbol-definitions -->  lib/ib/symbols
contracts = {123 => IB::Symbols::Futures.mini_dax,
              456 => IB::Stock.new( symbol: 'BAS',  currency: 'EUR') ,  # BASF
              789 => IB::Symbols::Forex.eurusd 
}


# Connect to IB TWS.
ib = IB::Connection.new **Init.params  do | gw| 
  # Subscribe to TWS alerts/errors
	gw.subscribe(:Alert, :ManagedAccounts) { |msg| puts msg.to_human }

	# Subscribe to HistoricalData incoming events.  The code passed in the block
	# will be executed when a message of that type is received, with the received
	# message as its argument. In this case, we just print out the data.
	#
	# Note that we have to look the ticker id of each incoming message
	# up in local memory to figure out what it's for.
	gw.subscribe(IB::Messages::Incoming::HistoricalData) do |msg|
		puts contracts[msg.request_id].description + ": #{msg.count} items:"
		msg.results.each { |entry| puts "  #{entry}" }
	end

  gw.subscribe( IB::Messages::Incoming::HistoricalDataUpdate) do |msg|
    if msg.bar.volume.zero?
      puts "-------------- New Bar -----------------------"
    end
    puts msg.to_human

  end
end

# Now we actually request historical data for the symbols we're interested in. TWS will
# respond with a HistoricalData message, which will be processed by the code above.
#
# bar_size: ---> IB::BAR_SIZES.values
# => [:sec1, :sec5, :sec15, :sec30, :min1, :min2, :min3, :min5, :min15, :min30, :hour1, :day1]
# what_to_show:
# =>   :trades :midpoint, :bid, :ask, :bid_ask, :historical_volatility, :option_implied_volatility
# use_rth: Determines whether to return all data available during the requested time span,
#		  or only data that falls within regular trading hours. Valid values include:
#
#	    0 - all data is returned even where the market in question was outside of its
#		regular trading hours.
#	    1 - only data within the regular trading hours is returned, even if the

contracts.each_pair do |request_id, contract|
  ib.send_message IB::Messages::Outgoing::RequestHistoricalData.new(
                      request_id: request_id,
                      contract: contract,
#                     end_date_time: Time.now.to_ib,
                      duration: '2 D', #    ?
                      bar_size: :min1, #  IB::BAR_SIZES.key(:hour)?
                      what_to_show: :trades,
                      use_rth: 0,
                      keep_up_todate: 1)    # if set to `1` here, comment end_date_time
end

# IB does not send any indication when all historic data is done being delivered.
# So we need to interrupt manually when our request is answered.
puts "\n******** Press <Enter> to exit... *********\n\n"
STDIN.gets

__END__


