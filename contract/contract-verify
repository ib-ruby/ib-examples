#!/usr/bin/env ruby
#
# This script gets details for specific contract from IB
#
# It uses the _verify_ helper-method of Contract

require 'bundler/setup'
# load predefined symbols
require 'ib/symbols'
require 'ib/verify'
require_relative 'config'

q =  Queue.new

include IB
# Definition of what we want market data for. 
#
# I. Selected Contracts
 contracts = [ IB::Symbols::Stocks.wfc,
              IB::Symbols::Stocks.vxx,
              IB::Symbols::Futures.vix,
              IB::Symbols::Futures.ym,
              IB::Symbols::Options.ge,
              IB::Symbols::Forex.eurusd,
              ### Bonds are not actually not supported
              ###    IB::Symbols::Bonds[:wag],
              IB::Symbols::Stocks.wrong ]
# or
# II. Use predefined Contracts
 stock_contracts =   Symbols::Stocks.all.map{|x|  Symbols::Stocks.send x }
 future_contracts =  Symbols::Futures.all.map{|x|  Symbols::Futures.send x }
 option_contracts =  Symbols::Options.all.map{|x|  Symbols::Options.send x }
 index_contracts =   Symbols::Index.all.map{|x|  Symbols::Index.send x }

 ## comment if you want to display selected contracts ( I. )
 contracts = stock_contracts + future_contracts + option_contracts + index_contracts


# Connect to IB TWS.
 ib = Connection.new **Init.params  do | gw|
  # Subscribe to TWS alerts/errors and contract data end marker
  gw.subscribe(:Alert) { |msg| puts msg.to_human }

# Set log level
  gw.logger.level = Logger::FATAL
 end


# Verify the Contracts (async)
producer = contracts. map do | contract |
    puts "\nRequesting contract data for #{contract.description}"
    contract.verify( thread: true ) do | evaluated_contract |
      #  put the datat to the queue
      q.push evaluated_contract
    end
  end

consumer = Thread.new do
  i = 0
  # wait for data
  while  contract =  q.pop   do
     i +=1
      puts contract.to_human + "\n"
      puts "#{i} Attributes: "
      puts "\t"+ contract.invariant_attributes.map{ |k,v|  "#{k} : #{v}" unless v.blank? || (v.is_a?(Numeric) && v.zero?)  }.join("\n\t")
#      break if  i == 103
  end
 end
 producer.join
 # wait 0.5 sec to finish processing
 sleep 0.5
