#!/usr/bin/env ruby
#
# This script subscribes to market data for a list of Options and prints them 

require 'bundler/setup'
require 'ib/symbols'
require 'ib/verify'
require_relative 'config'


COUNT_OF_EVENTS =  40
# Definition of what we want market data for.
contracts = [ IB::Symbols::Options.ge,  IB::Symbols::Options.spy,
              IB::Symbols::Options.aapl]
# Array to store gernerated request_id's
list_of_ids =[]

# Queue for communication between threads
q =  Queue.new

counter = 0

#contracts = [ IB::Option.new( symbol: 'ESTX50', exchange:'DTB', multiplier: 10, currency: 'EUR', strike: 3200, expiry: '202012', right: :put) ,IB::Symbols::Options.ge ]
# First, connect to IB TWS. 
ib = IB::Connection.new **Init.params  do | gw| 

  ## Subscribe to TWS alerts/errors
  gw.subscribe(:Alert, :ManagedAccounts) { |msg| puts msg.to_human }
	#  set the log level
	gw.logger.level = Logger::FATAL
  # Subscribe to Ticker... events.  The code passed in the block will be executed when
  # any message of that type is received, with the received message as its argument.
  # In this case, we  put the  data to the queue
  # After 20 events: close the queue  
  #
  # After cancelling the subscrition, the tws continuies to send some ticks. 
  gw.subscribe(:TickPrice, :TickSize, :TickOption, :TickString, :TickRequestParameters) do |msg|
    counter =  counter + 1
    q.push msg  unless q.closed?
    q.close if counter == COUNT_OF_EVENTS
  end
end
# Now we actually request market data for the symbols we're interested in.
#
# ### ticklist-values :  lib/ib/messages/outgoing/request_marketdata.rb 
# 100 : Option Volumne
# 101 : Option Open Interest
# 106 :Option Implied Volatility
ib.send_message :RequestMarketDataType, :market_data_type => :delayed
#  ensure that the contracts are valid
contracts = contracts.map{|y| y.verify.first}.compact
list_of_ids = contracts.map do |contract|
  ib.send_message :RequestMarketData, :contract => contract ,  tick_list: [100,101,106]
end
puts contracts.as_table
# we modify contracts: { ticker_id => Contract } ( Will be used in the subscription thread )
contracts =  list_of_ids.zip( contracts ).to_h

## close the queue after 20 seconds
t =  Thread.new do
  sleep 20
  q.close
end

while  msg =  q.pop
   puts  contracts[msg.ticker_id].as_table
   puts msg.to_human
end
puts "Cancelling market data subscription.."

contracts.each_with_index { | contract, i| ib.send_message :CancelMarketData, :id => i+1 }

puts "finished"
