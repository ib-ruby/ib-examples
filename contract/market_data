#!/usr/bin/env ruby
#
# This script connects to IB API and subscribes to market data for specific symbols

require 'bundler/setup'
require 'ib-api'
require 'ib/symbols'
require_relative 'config'

COUNT_OF_EVENTS =  200
# Definition of what we want market data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
# (note: the forex symbols used here  are defined in lib/ib/symbols/forex.rb of the ib-symbols gem)
symbols = [ IB::Symbols::Forex.gbpusd , IB::Symbols::Forex.eurusd , IB::Symbols::Forex.usdcad  ]
ids = {}
counter = 0
q =  Queue.new
#
# connect to IB TWS.
ib = IB::Connection.new **Init.params do | gw | 
  ## Subcribe to forseable events before the connection is completed
  ## Subscribe to TWS alerts/errors
  gw.subscribe(:Alert) { |msg| puts msg.to_human }
  gw.logger.level = Logger::FATAL

  # Subscribe to TickerPrice and TickerSize events.  The code passed in the block will
  # be executed when a message of that type is received, with the received message as its
  # argument. In this case, we just print out the tick. NB: The description field is not
  # from IB TWS. It is defined locally in forex.rb, and is just arbitrary text.

  gw.subscribe( :TickRequestParameters, :TickPrice, :TickSize,  :TickGeneric ) do |msg|
    q.push msg unless q.closed?
    counter = counter + 1
    if counter == COUNT_OF_EVENTS
      puts "\nCancelling market data subscription.."
      ids.each { | id, _ | ib.send_message :CancelMarketData, :id => id }  
      puts "The TWS sends additional TickEvents after the subscription is cancelled ... \n\n waiting for 1 sec\n\n"
      sleep 1
      q.close
    end
  end
end
# Now we actually request market data for the symbols we're interested in.
ib.send_message :RequestMarketDataType, :market_data_type => :delayed
symbols.each do | c |
  id = ib.send_message :RequestMarketData, :contract => c
  ids[id] = c
end

puts "\nSubscribed to market data"
puts "\n********* Receiving #{COUNT_OF_EVENTS} TickEvents, then canceling the subscription ***** \n\n" 


while  msg =  q.pop
    puts ids[msg.ticker_id].description + ": " + msg.to_human
end

puts "\n\nfinished."
