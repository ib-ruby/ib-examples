#!/usr/bin/env ruby
#
# This script exports your IB portfolio in a CSV format.
#
# Portfolio-Positions are printed on the screen.
# A file  {Account}_{Date}.csv is created (or overwritten)

require 'bundler/setup'
require 'csv'
require 'ib-api'
require_relative 'config'


module IB
  class Contract
    # reopen model class and add custom method to customize the output
    def csv_output
      [ symbol,
        IB::CODES[:sec_type][sec_type],
        expiry,
        strike == 0 ? "" : strike,
        right == :none ? "" : right,
        currency,
        local_symbol
      ]
    end

    def self.csv_header
      [ :Symbol,
         :SecType,
         :Expiry,
         :Strike,
         :Right,
         :Currency,
         :LocalSymbol
        ]
    end
  end
end


# Only for Advisors: you need to provide account id such as U666777
account = ARGV[0] || ''
accounts = []
portfolio_values = []

q =  Queue.new


ib = IB::Connection.new **Init.params do | gw |
# Connect to IB TWS and subscribe to events

  # Subscribe to TWS alerts/errors and account-related messages
  # that TWS sends in response to account data request
  gw.subscribe(:Alert) do |msg|
			## if no account is specified as parameter, but required (Error 321 indicates this) 
			## fetch data from the last account detected. (The first is most probably the Advisor-Account)
                       if  msg.code == 321
                           account = accounts.last
                           gw.send_message :RequestAccountData, :subscribe => true, :account_code => account
                       end
  end
  # Get rid of logging verbosity
  gw.logger.level =  Logger::FATAL
  # add received messages to the queue
  gw.subscribe(:PortfolioValue) { |msg| q.push msg.portfolio_value }
  # close the queue if all data are received
  gw.subscribe(:AccountDownloadEnd){ q.close }
  # Just in case: put account-names into accounts-array
  gw.subscribe(:ManagedAccounts){  |msg| accounts = msg.accounts_list.split ',' }
end

# Request account data
ib.send_message :RequestAccountData, :subscribe => true, :account_code => account

# output of the queue
while pv =  q.pop 
 portfolio_values <<  pv
 puts "recieved  #{pv.to_human} "
end

#  while loop breaks if the queue is closed
output_file =  "#{account}_#{Date.today}.csv"
headers = IB::Contract.csv_header + portfolio_values.first.invariant_attributes.keys+[:Account]
row = -> (p){ p.contract.csv_output + p.invariant_attributes.values + [p.account]}
CSV.open( output_file, 'w' ){|f|  f << headers ; portfolio_values.each{|pv| f << row[pv] }}
puts  "\n\nCSV-Output is saved in #{output_file} \n\n"

# finally unsubscribe from AccountData
ib.send_message :RequestAccountData, :subscribe => false, :account_code => account
sleep 0.5

