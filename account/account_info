#!/usr/bin/env ruby
#
# This script connects to IB API, subscribes to account info and prints out
# messages received from IB (update every 3 minute or so)

require 'bundler/setup'
require 'ib-api'
require_relative 'config'


# Only for Advisor accounts: you can provide account_code such as U666777  (otherwise the last account is used)
account_code = ARGV[0] || ''

# Connect to IB TWS
accounts =  []
aq, pq =  Queue.new, Queue.new

ib = IB::Connection.new **Init.params do | gw |  

	# Subscribe to TWS alerts/errors and account-related messages
	# that TWS sends in response to account data request
	gw.subscribe(:Alert) do |msg|
			## if an account is not given. but required, (Error 321 indicates this)
			## fetch data from the last account detected. (The first is most probably the Advisor-Account)
											if  msg.code == 321
												gw.send_message :RequestAccountData, :subscribe => true, :account_code => accounts.last
											else
												puts msg.to_human
											end
								end

	## Collect Account+Portfolio-Values
	gw.subscribe(:AccountValue)   { |msg| aq << msg }
  gw.subscribe(:PortfolioValue) { |msg| pq << msg }


	## Just in case: put account-names into accounts-array
	gw.subscribe(:ManagedAccounts){  |msg| accounts = msg.accounts_list.split ',' }
	gw.subscribe(:AccountUpdateTime) { |msg| "do nothing" }#puts msg.to_human }

	# Set log level
	gw.logger.level = Logger::FATAL # DEBUG #FATAL
end
puts "\nRequesting IB account data"

ib.send_message :RequestAccountData, :subscribe => true, :account_code => account_code



puts "\nNext, the data are displayed."

# Queue#pop waits for data to appear"
loop do
  puts pq.pop.to_human
  break if pq.empty?
end

loop do
  puts aq.pop.to_human
  break if aq.empty?
end


puts "Cancelling account data subscription.."

ib.send_message :RequestAccountData, :subscribe => false
# wait until the request ist processed
sleep 0.5

